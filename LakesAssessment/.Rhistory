AvgSummerTemp$TempCatS[AvgSummerTemp$SummerTemp>=18.29&AvgSummerTemp$SummerTemp<=21.7]<-"Cool"
##Avg July Temp##
July<- AvgDay[AvgDay$month=='07'& AvgDay$N>=24,]
AvgJulyTemp <- ddply(July,"SID",summarize,JulyTemp=mean(mean),JN=length(mean))#Summer Temp Month
AvgJulyTemp$TempCatJ <- AvgJulyTemp$JulyTemp
AvgJulyTemp$TempCatJ<- as.character(AvgJulyTemp$TempCat)
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp<18.45]<-"Cold"
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp>22.30]<-"Warm"
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp>=18.45&AvgJulyTemp$JulyTemp<=22.30]<-"Cool"
##Max Daily Mean##
MaxDailyTemp <- ddply(AvgDay,"SID",summarize,MaxD = max(mean),MN=length(mean))
MaxDailyTemp$TempCatM <- MaxDailyTemp$MaxD
MaxDailyTemp$TempCatM <- as.character(MaxDailyTemp$MaxD)
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD<22.4]<- "Cold"
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD>26.3]<- "Warm"
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD>=22.4&MaxDailyTemp$MaxD<=26.3]<- "Cool"
##N Days >= 24.9 degree C and N Days >= 27 May 1 - Sept 15##
MaxDates<- MaxDay[MaxDay$month=='05'|MaxDay$month=='06'|MaxDay$month=='07'|MaxDay$month=='08'|
(MaxDay$month=='09' & MaxDay$d<=15),]
MaxDates$MaxTemp24.9<- ifelse(MaxDates$max>=24.9,1,0)
MaxDates$MaxTemp27<- ifelse(MaxDates$max>=27,1,0)
MaxGreaterThanTemp<-ddply(MaxDates,"SID",summarize,Max24.9=sum(MaxTemp24.9),Max27=sum(MaxTemp27))
##Combine and Export Metrics By Year
TempMetrics <- merge(AvgSummerTemp,AvgJulyTemp,by="SID")
TempMetrics <-merge(TempMetrics,MaxDailyTemp,by="SID")
TempMetrics <-merge(TempMetrics,MaxGreaterThanTemp,by="SID")
TempMetrics$Flag [TempMetrics$SN<92|TempMetrics$JN <31] <- 1
TempMetrics$Year<-yrCol[n,1]
TempMetrics$Collector<-yrCol[n,2]
TempMetricsAll<-rbind(TempMetricsAll,TempMetrics)
#write.csv(TempMetrics,"S:/M_Kozlak/Temperature/TemperatureDB/MetricCalcs/TempMetrics.csv",append=TRUE,row.names=FALSE)
#write.csv(TempMetrics,paste0("S:/M_Kozlak/Temperature/TemperatureDB/MetricCalcs/TempMetrics",yrCol[n,2],yrCol[n,1],".csv"),row.names=FALSE)
}
dim(TempMetricsAll)
TempMetricsAll[500:550,]
TempMetricsAll[1000:1050,]
TempMetricsAll[900:950,]
library(RSQLite)
library(plyr)
library(ggplot2)
library(lubridate)
#open ODBC
db_path <- 'S:/M_Kozlak/Temperature/TemperatureDB/' #on windows like this
db <- dbConnect(SQLite(), dbname=paste(db_path,"stream.temperature.sqlite",sep=''));
##Query with Field Flags and put into R data.fram and native R types
SELECTflag<- "SELECT probe_temps.ProbeID, probe_temps.SID, probe_temps.Date_Time, probe_temps.Temp, probe_temps.UOM, probe_temps.Collector, probe_temps.ProbeType, fieldflag.DateStart, fieldflag.DateEnd, fieldflag.COMMENT
FROM probe_temps
LEFT JOIN fieldflag ON probe_temps.ProbeID = fieldflag.ProbeID AND probe_temps.SID = fieldflag.SID AND probe_temps.Date_Time >= fieldflag.DateStart AND probe_temps.Date_Time <= fieldflag.DateEnd"
table<- dbGetQuery(db,SELECTflag)
#query/look at data as an R data.frame and native R types<<<<<<<<<<<<<<<<
#look at some data
#names  <- dbListTables(db);                        # The tables in the database
#fields <- dbListFields(db, "probe_temps");    # The columns in a table
#table  <- dbReadTable(db, "probe_temps");  # get the whole table as a data.frame
#Summarize data by day
table$day <- substr(table$Date_Time,6,10)##Add column of data that includes month_day
table$month<- substr(table$Date_Time,6,7)##Add column of data that includes month
table$year<- substr(table$Date_Time,1,4)##Add column of data that includes year
table$date<-ymd_hms(table$Date_Time)
TempMetricsAll<-data.frame(SID=character(),SummerTemp=numeric(),SN=numeric(),TempCatS=character(),JulyTemp=numeric(),JN=numeric(),
TempCatJ=character(),MaxD=numeric(),MN=numeric(),TempCatM=character(),
Max24.9=numeric(),Max27=numeric(),Flag=numeric(),Year=character(),Collector=character())
SummerMonthCnt<-table[table$month=='06'|table$month=='07'|table$month=='08',]
yrCol<- unique(SummerMonthCnt[,c('year','Collector')])
for (n in 1:dim(yrCol)[1]){
temp <- table[which(table$Collector==yrCol[n,2] & table$year==yrCol[n,1]),]##Subset by Year and Collector
AvgDay <- ddply(temp,c("SID","day","month","year"),summarize,mean=mean(Temp),N=length(Temp))#AvgByDay
AvgDay$day<-as.numeric(substr(AvgDay$day,4,5))
MaxDay<- ddply(temp,c("SID","day","month","year"),summarize,max=max(Temp),N=length(Temp))#MaxOnAGivenDay
MaxDay$d<-as.numeric(substr(MaxDay$day,4,5))
##Avg Summer Temp##
SummerMonths <- AvgDay[AvgDay$month=='06'|AvgDay$month=='07'|AvgDay$month=='08'&AvgDay$N>=24,]
AvgSummerTemp <- ddply(SummerMonths,"SID",summarize,SummerTemp=mean(mean),SN=length(mean))#Summer Temp Month
AvgSummerTemp$TempCatS <- AvgSummerTemp$SummerTemp
AvgSummerTemp$TempCatS<- as.character(AvgSummerTemp$TempCat)
AvgSummerTemp$TempCatS[AvgSummerTemp$SummerTemp<18.29]<-"Cold"
AvgSummerTemp$TempCatS[AvgSummerTemp$SummerTemp>21.7]<-"Warm"
AvgSummerTemp$TempCatS[AvgSummerTemp$SummerTemp>=18.29&AvgSummerTemp$SummerTemp<=21.7]<-"Cool"
##Avg July Temp##
July<- AvgDay[AvgDay$month=='07'& AvgDay$N>=24,]
AvgJulyTemp <- ddply(July,"SID",summarize,JulyTemp=mean(mean),JN=length(mean))#Summer Temp Month
AvgJulyTemp$TempCatJ <- AvgJulyTemp$JulyTemp
AvgJulyTemp$TempCatJ<- as.character(AvgJulyTemp$TempCat)
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp<18.45]<-"Cold"
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp>22.30]<-"Warm"
AvgJulyTemp$TempCatJ[AvgJulyTemp$JulyTemp>=18.45&AvgJulyTemp$JulyTemp<=22.30]<-"Cool"
##Max Daily Mean##
MaxDailyTemp <- ddply(AvgDay,"SID",summarize,MaxD = max(mean),MN=length(mean))
MaxDailyTemp$TempCatM <- MaxDailyTemp$MaxD
MaxDailyTemp$TempCatM <- as.character(MaxDailyTemp$MaxD)
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD<22.4]<- "Cold"
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD>26.3]<- "Warm"
MaxDailyTemp$TempCatM [MaxDailyTemp$MaxD>=22.4&MaxDailyTemp$MaxD<=26.3]<- "Cool"
##N Days >= 24.9 degree C and N Days >= 27 May 1 - Sept 15##
MaxDates<- MaxDay[MaxDay$month=='05'|MaxDay$month=='06'|MaxDay$month=='07'|MaxDay$month=='08'|
(MaxDay$month=='09' & MaxDay$d<=15),]
MaxDates$MaxTemp24.9<- ifelse(MaxDates$max>=24.9,1,0)
MaxDates$MaxTemp27<- ifelse(MaxDates$max>=27,1,0)
MaxGreaterThanTemp<-ddply(MaxDates,"SID",summarize,Max24.9=sum(MaxTemp24.9),Max27=sum(MaxTemp27))
##Combine and Export Metrics By Year
TempMetrics <- merge(AvgSummerTemp,AvgJulyTemp,by="SID")
TempMetrics <-merge(TempMetrics,MaxDailyTemp,by="SID")
TempMetrics <-merge(TempMetrics,MaxGreaterThanTemp,by="SID")
TempMetrics$Flag [TempMetrics$SN<92|TempMetrics$JN <31] <- 1
TempMetrics$Year<-yrCol[n,1]
TempMetrics$Collector<-yrCol[n,2]
TempMetricsAll<-rbind(TempMetricsAll,TempMetrics)
#write.csv(TempMetrics,"S:/M_Kozlak/Temperature/TemperatureDB/MetricCalcs/TempMetrics.csv",append=TRUE,row.names=FALSE)
#write.csv(TempMetrics,paste0("S:/M_Kozlak/Temperature/TemperatureDB/MetricCalcs/TempMetrics",yrCol[n,2],yrCol[n,1],".csv"),row.names=FALSE)
}
write.csv(TempMetricsAll,"TempMetricsAllSamples.csv",row.names=FALSE)
write.csv(TempMetricsAll,"S:/M_Kozlak/Temperature/TemperatureDB/MetricCalcs/TempMetricsAllSamples.csv",row.names=FALSE)
library('RSQLite')
db_path <- 'P:/Projects/2019/LakeSedimentDiatoms/LakeDiatomDB'
db <- dbConnect(SQLite(), dbname=paste(db_path,"lake_diatom.sqlite",sep=''));
SQL <- "CREATE TABLE diatom_cnts
(
SITE_ID text not null,
BENCH_NAME text not null,
BiodataTaxonName text not null,
COUNT integer not null
);"
dbSendQuery(conn=db,SQL);
dbDisconnect(db);
db_path <- 'P:/Projects/2019/LakeSedimentDiatoms/LakeDiatomDB/'
db <- dbConnect(SQLite(), dbname=paste(db_path,"lake_diatom.sqlite",sep=''));
SQL <- "CREATE TABLE diatom_cnts
(
SITE_ID text not null,
BENCH_NAME text not null,
BiodataTaxonName text not null,
COUNT integer not null
);"
dbSendQuery(conn=db,SQL);
dbGetQuery(db,'SELECT * FROM diatom_cnts')
SQL <- "CREATE TABLE diatom_taxa
(
BenchTaxonName text,
TaxonConceptState	text,
BiologicalCommunity text,
AlgalGroup text,
BenchTaxonProvisional text,
BenchTaxonHybrid text,
BiodataTaxonName text,
BiodataCommonName text,
BiodataShortName text,
BiodataTaxonProvisional text,
BiodataTaxonHybrid text,
PublishedTaxonLevel text,
ScientificName text,
Phylum text,
Class	Order_ text,
Family text,
Genus	text,
Species	text,
Subspecies text,
Variety text,
Form text
);"
dbSendQuery(conn=db,SQL);
library('RSQLite')
library('lubridate')
db_path <- 'S:/J_Tonfa/5YrMonitoringRpt'
db <- dbConnect(SQLite(), dbname=paste(db_path,"monrpt.sqlite",sep=''));
SQL<- " SELECT *
FROM chemdata;"
sQL
SQL
dbGetQuery(conn=db,SQL)
db
dbDisconnect(db);
dbDisconnect(db);
db_path <- 'S:/J_Tonfa/5YrMonitoringRpt'
db <- dbConnect(SQLite(), dbname=paste(db_path,"monrpt.db",sep=''));
SQL<- " SELECT *
FROM chemdata;"
dbGetQuery(conn=db,SQL)
dbDisconnect(db);
paste(db_path,"monrpt.db",sep='')
db_path <- 'S:/J_Tonfa/5YrMonitoringRpt/'
db <- dbConnect(SQLite(), dbname=paste(db_path,"monrpt.db",sep=''));
SQL<- " SELECT *
FROM chemdata;"
dbGetQuery(conn=db,SQL)
SQL<- "SELECT sta_seq
FROM chemdata
GROUP BY sta_seq;"
table<-dbGetQuery(conn=db,SQL)
table
SQL<- "SELECT *
FROM chemdata;"
table<-dbGetQuery(conn=db,SQL); #Executes the query above and puts data into a dataframe (R data structure)
class(table)
class(table$value)
table[table$value==NA,]
table[where(table$value==NA),]
table[which(table$value==NA),]
table[1:10,]
unique(table$chemparameter)
names(table)
Chloride<-table[chemparameter=="Chloride"&duplicate==0,]
Chloride<-table[table$chemparameter=="Chloride"&table$duplicate==0,]
unique(Chloride$uom)
summary(chloride$value)
chloride<-table[table$chemparameter=="Chloride"&table$duplicate==0,]
#Make sure all chem values have the same UOM
unique(Chloride$uom)
summary(chloride$value)
summary(chloride$value)[1]
SQL<-"SELECT *
FROM basins;"
basins<-dbGetQuery(conn=db,SQL)
SQL<-"SELECT *
FROM basin;"
basin<-dbGetQuery(conn=db,SQL)
names(basin)
majbasin<-basin[,c("mbasn","major")]
SQL<-"SELECT
major,
mbasn
FROM basin
GROUP BY
mbasn;"
majbasin<-dbGetQuery(conn=db,SQL)
majbasin
table
names(table)
SQL<- "SELECT *
FROM chemdata
WHERE
station_type="River/Stream";"
table<-dbGetQuery(conn=db,SQL); #Executes the query above and puts data into a dataframe (R data structure)
SQL<- "SELECT *
FROM chemdata
WHERE
station_type='River/Stream';"
table<-dbGetQuery(conn=db,SQL); #Executes the query above and puts data into a dataframe (R data structure)
table[1:10,]
##Get all unique chemistry parameters
unique(table$chemparameter)
##Get the column names of the dataframe
names(table)
##Subset a table by columns
table[,c("sta_seq","chemparameter","value","uom","duplicate")]
names(table)
table[,c("sta_seq","collect_date","chemparameter","value","uom","duplicate")]
table[,c(1,3:6,12)]
table<-table[,c(1,3:6,12)]
SQL<-"SELECT
sites.sta_seq,
sites.name,
sites.ylat,
site.xlong,
sites.sbasn
basin.major,
basin.mbasn
FROM sites
JOIN basin
ON
sites.sbasn = basin.sbasn;"
sitesbasin<-dbGetQuery(conn=db,SQL)
SQL<-"SELECT
sites.sta_seq,
sites.name,
sites.ylat,
site.xlong,
sites.sbasn
basin.major,
basin.mbasn
FROM
sites
JOIN
basin
ON
sites.sbasn = basin.sbasn;"
sitesbasin<-dbGetQuery(conn=db,SQL)
SQL<-"SELECT
sites.sta_seq,
sites.name,
sites.ylat,
site.xlong,
sites.sbasn,
basin.major,
basin.mbasn
FROM
sites
JOIN
basin
ON
sites.sbasn = basin.sbasn;"
sitesbasin<-dbGetQuery(conn=db,SQL)
SQL<-"SELECT
sites.sta_seq,
sites.name,
sites.ylat,
sites.xlong,
sites.sbasn,
basin.major,
basin.mbasn
FROM
sites
JOIN
basin
ON
sites.sbasn = basin.sbasn;"
sitesbasin<-dbGetQuery(conn=db,SQL)
sitesbasin
table_basin<-merge(table,sitesbasin,by="sta_seq")
table_basin[1:10,]
chloride<-table_basin[table_basin$chemparameter=="Chloride"&table_basin$duplicate==0,]
table<-table[,c(1,3:6,11:12)]
table<-table[,c(1,3:6,11,12)]
SQL<- "SELECT *
FROM
chemdata
WHERE
station_type='River/Stream';"
table<-dbGetQuery(conn=db,SQL); #Executes the query above and puts data into a dataframe (R data structure)
table<-table[,c(1,3:6,11:12)]
table_basin<-merge(table,sitesbasin,by="sta_seq")
chloride<-table_basin[table_basin$chemparameter=="Chloride"&table_basin$duplicate==0,]
unique(Chloride$uom)
unique(table$station_type)
summary(chloride$value)
by(chloride["value"]),INDICES=list(MajorBasin=unique(table_basin$major)),FUN=summary)
by(chloride["value"],INDICES=list(MajorBasin=unique(table_basin$major)),FUN=summary)
by(chloride["value"],INDICES=list(MajorBasin=unique(table_basin$major)),FUN=range)
chloride["value"]
INDICES=list(MajorBasin=unique(table_basin$major))
INDICES
aggregate(chloride["value"],INDICES=list(MajorBasin=unique(table_basin$major)),FUN=mean)
aggregate(chloride["value"],by=list(MajorBasin=unique(table_basin$major)),FUN=mean)
aggregate(chloride["value"],by=list(MajorBasin=unique(chloride$major)),FUN=mean)
aggregate(chloride["value"],by=list(MajorBasin=chloride$major),FUN=mean)
aggregate(chloride["value"],by=list(MajorBasin=chloride$major),FUN=summary)
aggregate(chloride["value"],by=list(MajorBasin=chloride$major),FUN=n)
aggregate(chloride["value"],by=list(MajorBasin=chloride$major),FUN=length)
length(chloride$value)
class(table_basin)
class(table_basin$value)
setwd("P:/Projects/GitHub_Prj/Lakes/LakesAssessment")
library(ggplot2)
library(grid)
library(gridExtra)
library(rgdal)
library(sp)
library(sf)
library(png)
library(tmap)
library(dplyr)
lakes<-read.csv("data/lakedata14_16.csv",header=TRUE)
lakespoly<-read_sf("data/Lake_Site_Poly_12_17.geojson")
lakespts<-read_sf("data/Lake_Site_Point_12_17.geojson")
cttownspoly<-read_sf("data/CTTowns.geojson")
lakes$summer<-ifelse(lakes$Season=="Summer",1,0)
lakes$spring<-ifelse(lakes$Season=="Spring",1,0)
lakestouse<- lakes %>%
group_by(STA_SEQ,Year) %>%
summarise(TotalSeason=sum(c(summer,spring)))
lakestouse<-lakestouse[lakestouse$TotalSeason==2,]
lake_samples<-merge(lakes,lakestouse,by=c("STA_SEQ","Year"))
lake_nut_avg<- lake_samples %>%
group_by(STA_SEQ,Year) %>%
summarise(Phosphorus=mean(Phosphorus),Nitrogen=mean(Nitrogen))
lake_summer<- lake_samples[lake_samples$Season=="Summer",]
lake_summer<-lake_summer[,c(1:3,5:7,10)]
lakes<-merge(lake_summer,lake_nut_avg,by=c("STA_SEQ","Year"))
lakes$TPCAT<-ifelse(lakes$Phosphorus<=0.010,1,
ifelse(lakes$Phosphorus>0.010 & lakes$Phosphorus<=0.015,2,
ifelse(lakes$Phosphorus>0.015 & lakes$Phosphorus<=0.025,3,
ifelse(lakes$Phosphorus>0.025 & lakes$Phosphorus<=0.030,4,
ifelse(lakes$Phosphorus>0.030 & lakes$Phosphorus<=0.050,5,
ifelse(lakes$Phosphorus > 0.050,6,NA))))))
lakes$NCAT<-ifelse(lakes$Nitrogen<=0.2,1,
ifelse(lakes$Nitrogen>0.2 & lakes$Nitrogen<=0.3,2,
ifelse(lakes$Nitrogen>0.3 & lakes$Nitrogen<=0.5,3,
ifelse(lakes$Nitrogen>0.5 & lakes$Nitrogen<=0.6,4,
ifelse(lakes$Nitrogen>0.6 & lakes$Nitrogen<=1,5,
ifelse(lakes$Nitrogen > 1,6,NA))))))
lakes$CCAT<-ifelse(lakes$Chlorophyll.a<=2,1,
ifelse(lakes$Chlorophyll.a>2 & lakes$Chlorophyll.a<=5,2,
ifelse(lakes$Chlorophyll.a>5 & lakes$Chlorophyll.a<=10,3,
ifelse(lakes$Chlorophyll.a>10 & lakes$Chlorophyll.a<=15,4,
ifelse(lakes$Chlorophyll.a>15 & lakes$Chlorophyll.a<=30,5,
ifelse(lakes$Chlorophyll.a > 30,6,NA))))))
lakes$SCAT<-ifelse(lakes$Secchi>=6,1,
ifelse(lakes$Secchi<6 & lakes$Secchi>=4,2,
ifelse(lakes$Secchi<4 & lakes$Secchi>=3,3,
ifelse(lakes$Secchi<3 & lakes$Secchi>=2,4,
ifelse(lakes$Secchi<2 & lakes$Secchi>=1,5,
ifelse(lakes$Secchi < 1,6,NA))))))
#Average the Trophic Scores and Assign a Trophic Category
lakes$TAvg<-rowMeans(subset(lakes,select=c(TPCAT,NCAT,CCAT,SCAT)),na.rm=TRUE)
lakes$Trophic<- ifelse(lakes$TAvg<=2,"Oligotrophic",
ifelse(lakes$TAvg>2 & lakes$TAvg<=3,"Early Mesotrophic",
ifelse(lakes$TAvg>3 & lakes$TAvg<=4,"Mesotrophic",
ifelse(lakes$TAvg>4 & lakes$TAvg<=5,"Late Mesotrophic",
ifelse(lakes$TAvg>5 & lakes$TAvg<6,"Eutrophic",
ifelse(lakes$TAvg == 6,"Highly Eutrophic",NA))))))
ggplot()+
xlim(0,7)+
ylim(0.5,1.5)+
#scale_x_continuous(breaks=c(1,3,5,6),
#               label=c("Oligotrophic","Mesotrophic",
#                       "Eutrophic","Highly Eutrophic"),position="top")+
scale_x_continuous(breaks=c(1,3,5,6),
label=c("","",
"",""),position="top")+
geom_raster(data=gradient,aes(x,y,fill=z),interpolate=TRUE)+
scale_fill_gradientn(colours = c("blue","cyan","chartreuse"))+
geom_point(data=l,aes(TAvg,1),shape=17,size=5)+
theme(panel.background = element_rect(fill = "white", colour = "white"),
axis.title=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),axis.ticks.x=element_blank(),legend.position = "none")
l<-6
lakemappt<-lakespts[lakespts$STA_SEQ==l$STA_SEQ,]
lakemappoly<-lakespoly[lakespoly$HydroID==lakemappt$HydroID,]
##Make a map of the parsed lake data
smap<-  tm_shape(cttownspoly)+
tm_polygons(col="gray",border.col="white",lwd=2)+
tm_shape(lakemappt)+
tm_symbols(col="black")+
tm_layout(bg.color="midnightblue")
lmap<-  tm_shape(lakemappoly)+
tm_polygons(col="deepskyblue1",border.col="white",lwd=3,border.alpha=0.7)+
tm_shape(lakemappt)+
tm_symbols(col="black")+
tm_layout(bg.color="midnightblue")
lakes<-read.csv("data/lakedata14_16.csv",header=TRUE)
lakespoly<-read_sf("data/Lake_Site_Poly_12_17.geojson")
lakespts<-read_sf("data/Lake_Site_Point_12_17.geojson")
cttownspoly<-read_sf("data/CTTowns.geojson")
lakes$summer<-ifelse(lakes$Season=="Summer",1,0)
lakes$spring<-ifelse(lakes$Season=="Spring",1,0)
#Only calc trophic cat for lakes that have both spring and summer (within one year)
#could include a summer sample in one year and spring sample in the next year
lakestouse<- lakes %>%
group_by(STA_SEQ,Year) %>%
summarise(TotalSeason=sum(c(summer,spring)))
lakestouse<-lakestouse[lakestouse$TotalSeason==2,]
lake_samples<-merge(lakes,lakestouse,by=c("STA_SEQ","Year"))
lake_nut_avg<- lake_samples %>%
group_by(STA_SEQ,Year) %>%
summarise(Phosphorus=mean(Phosphorus),Nitrogen=mean(Nitrogen))
lake_summer<- lake_samples[lake_samples$Season=="Summer",]
lake_summer<-lake_summer[,c(1:3,5:7,10)]
lakes<-merge(lake_summer,lake_nut_avg,by=c("STA_SEQ","Year"))
##Calculate Trophic Score for Each Parameter (TP, TN, Chlor a, Transparency)
lakes$TPCAT<-ifelse(lakes$Phosphorus<=0.010,1,
ifelse(lakes$Phosphorus>0.010 & lakes$Phosphorus<=0.015,2,
ifelse(lakes$Phosphorus>0.015 & lakes$Phosphorus<=0.025,3,
ifelse(lakes$Phosphorus>0.025 & lakes$Phosphorus<=0.030,4,
ifelse(lakes$Phosphorus>0.030 & lakes$Phosphorus<=0.050,5,
ifelse(lakes$Phosphorus > 0.050,6,NA))))))
lakes$NCAT<-ifelse(lakes$Nitrogen<=0.2,1,
ifelse(lakes$Nitrogen>0.2 & lakes$Nitrogen<=0.3,2,
ifelse(lakes$Nitrogen>0.3 & lakes$Nitrogen<=0.5,3,
ifelse(lakes$Nitrogen>0.5 & lakes$Nitrogen<=0.6,4,
ifelse(lakes$Nitrogen>0.6 & lakes$Nitrogen<=1,5,
ifelse(lakes$Nitrogen > 1,6,NA))))))
lakes$CCAT<-ifelse(lakes$Chlorophyll.a<=2,1,
ifelse(lakes$Chlorophyll.a>2 & lakes$Chlorophyll.a<=5,2,
ifelse(lakes$Chlorophyll.a>5 & lakes$Chlorophyll.a<=10,3,
ifelse(lakes$Chlorophyll.a>10 & lakes$Chlorophyll.a<=15,4,
ifelse(lakes$Chlorophyll.a>15 & lakes$Chlorophyll.a<=30,5,
ifelse(lakes$Chlorophyll.a > 30,6,NA))))))
lakes$SCAT<-ifelse(lakes$Secchi>=6,1,
ifelse(lakes$Secchi<6 & lakes$Secchi>=4,2,
ifelse(lakes$Secchi<4 & lakes$Secchi>=3,3,
ifelse(lakes$Secchi<3 & lakes$Secchi>=2,4,
ifelse(lakes$Secchi<2 & lakes$Secchi>=1,5,
ifelse(lakes$Secchi < 1,6,NA))))))
#Average the Trophic Scores and Assign a Trophic Category
lakes$TAvg<-rowMeans(subset(lakes,select=c(TPCAT,NCAT,CCAT,SCAT)),na.rm=TRUE)
lakes$Trophic<- ifelse(lakes$TAvg<=2,"Oligotrophic",
ifelse(lakes$TAvg>2 & lakes$TAvg<=3,"Early Mesotrophic",
ifelse(lakes$TAvg>3 & lakes$TAvg<=4,"Mesotrophic",
ifelse(lakes$TAvg>4 & lakes$TAvg<=5,"Late Mesotrophic",
ifelse(lakes$TAvg>5 & lakes$TAvg<6,"Eutrophic",
ifelse(lakes$TAvg == 6,"Highly Eutrophic",NA))))))
i<-6
l<- lakes[i,]
##Parse out the lake data that you are interested in
lakemappt<-lakespts[lakespts$STA_SEQ==l$STA_SEQ,]
lakemappoly<-lakespoly[lakespoly$HydroID==lakemappt$HydroID,]
smap<-  tm_shape(cttownspoly)+
tm_polygons(col="gray",border.col="white",lwd=2)+
tm_shape(lakemappt)+
tm_symbols(col="black")+
tm_layout(bg.color="midnightblue")
lmap<-  tm_shape(lakemappoly)+
tm_polygons(col="deepskyblue1",border.col="white",lwd=3,border.alpha=0.7)+
tm_shape(lakemappt)+
tm_symbols(col="black")+
tm_layout(bg.color="midnightblue")
lmap
tm_shape(lakemappoly)+
tm_polygons(col="deepskyblue1",border.col="grey",lwd=3,border.alpha=0.7)+
tm_shape(lakemappt)+
tm_symbols(col="black")+
tm_layout(bg.color="midnightblue")
tm_shape(cttownspoly)+
tm_polygons(col="gray",border.col="white",lwd=2)+
tm_shape(lakemappt)+
tm_symbols(col="black")+
tm_layout(bg.color="midnightblue")
tm_shape(lakemappoly)+
tm_polygons(col="deepskyblue1",border.col="white",lwd=3,border.alpha=0.7)+
tm_shape(lakemappt)+
tm_symbols(col="black")+
tm_layout(bg.color="midnightblue")
